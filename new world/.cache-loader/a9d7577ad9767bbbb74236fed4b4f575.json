{"remainingRequest":"/Users/pro/new world/node_modules/babel-loader/lib/index.js!/Users/pro/new world/node_modules/eslint-loader/index.js??ref--3-0!/Users/pro/new world/app/public/js/apiRequest.js","dependencies":[{"path":"/Users/pro/new world/app/public/js/apiRequest.js","mtime":1521598404488},{"path":"/Users/pro/new world/.babelrc","mtime":1521535929596},{"path":"/Users/pro/new world/node_modules/cache-loader/dist/cjs.js","mtime":1521535871442},{"path":"/Users/pro/new world/node_modules/babel-loader/lib/index.js","mtime":1520329890000},{"path":"/Users/pro/new world/node_modules/eslint-loader/index.js","mtime":1499322156000}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _apiManager = require('./apiManager');\n\nvar _apiManager2 = _interopRequireDefault(_apiManager);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar xmlNative = function xmlNative(opt) {\n    opt = opt || {};\n    opt.method = opt.method.toUpperCase() || 'POST';\n    opt.url = opt.url || '';\n    opt.async = opt.async || true;\n    opt.data = opt.data || null;\n    opt.success = opt.success || function () {};\n    var xmlHttp = new XMLHttpRequest();\n    if (opt.method.toUpperCase() === 'POST') {\n        xmlHttp.open(opt.method, opt.url, opt.async);\n        xmlHttp.setRequestHeader('Content-Type', 'application/json; charset=utf-8');\n        xmlHttp.send(JSON.stringify(opt.data));\n    } else if (opt.method.toUpperCase() === 'GET') {\n        var params = [];\n        for (var key in opt.data) {\n            params.push(key + '=' + opt.data[key]);\n        }\n        var postData = params.join('&');\n        xmlHttp.open(opt.method, opt.url + '?' + postData, opt.async);\n        xmlHttp.send(null);\n    }\n    xmlHttp.onreadystatechange = function () {\n        if (xmlHttp.readyState === 4) {\n            if (xmlHttp.status === 200) {\n                opt.success(JSON.parse(xmlHttp.responseText), xmlHttp.status);\n            } else {\n                opt.error(JSON.parse(xmlHttp.responseText), xmlHttp.status);\n            }\n        }\n    };\n};\nvar ajax = function ajax(url, method, data, successCB, errorCB) {\n    var dataJson = {\n        data: data\n    };\n    return xmlNative({\n        method: method,\n        url: url,\n        data: dataJson || '',\n        success: function success(data, status) {\n            if (data.code === 0) {\n                successCB && successCB(data, status);\n            } else {\n                if (errorCB) {\n                    errorCB(data, status);\n                } else {\n                    console.log(data, status);\n                }\n            }\n        },\n        error: function error(data, status) {\n            console.log(status, status);\n        }\n    });\n};\nvar apiRequest = {\n    get: function get(apiName, data, successCB, errorCB) {\n        return ajax(_apiManager2.default[apiName], \"get\", data, function (data, status, xhr) {\n            return successCB && successCB(data.data, data.systemDate);\n        }, errorCB);\n    },\n    post: function post(apiName, data, successCB, errorCB) {\n        return ajax(_apiManager2.default[apiName], \"post\", data, function (data, status, xhr) {\n            return successCB && successCB(data.data, data.systemDate);\n        }, errorCB);\n    }\n};\nexports.default = apiRequest;",null]}