{"remainingRequest":"/Users/pro/new world/node_modules/babel-loader/lib/index.js!/Users/pro/new world/node_modules/eslint-loader/index.js??ref--4-0!/Users/pro/new world/app/public/js/ip.js","dependencies":[{"path":"/Users/pro/new world/app/public/js/ip.js","mtime":1521688364900},{"path":"/Users/pro/new world/.babelrc","mtime":1521535929596},{"path":"/Users/pro/new world/node_modules/cache-loader/dist/cjs.js","mtime":1521535871442},{"path":"/Users/pro/new world/node_modules/babel-loader/lib/index.js","mtime":1520329890000},{"path":"/Users/pro/new world/node_modules/eslint-loader/index.js","mtime":1499322156000}],"contextDependencies":[],"result":["'use strict';\n\nvar fs = require('fs');\nvar dns = require('dns');\n\nvar _17monIpDbPath = '../data/17monipdb.dat';\n\nvar loadBinaryData = function loadBinaryData(filepath) {\n    var fd = fs.openSync(filepath, 'r');\n    var indexLengthBuffer = new Buffer(4);\n    var chunkSize = 102400,\n        chunkBuffer,\n        chunks = [];\n\n    var readLength = 0,\n        bufferLength = 0;\n\n    while (true) {\n        chunkBuffer = new Buffer(chunkSize);\n        readLength = fs.readSync(fd, chunkBuffer, 0, chunkSize, bufferLength);\n        bufferLength += readLength;\n        chunks.push(chunkBuffer);\n        if (readLength < chunkSize) break;\n    }\n    fs.closeSync(fd);\n\n    return Buffer.concat(chunks);\n};\n\nvar IpFind = function IpFind(ip) {\n    if (dataBuffer == null) {\n        return [];\n    }\n    var ipArray = ip.trim().split('.'),\n        ip2long = function ip2long(ip) {\n        return new Buffer(ip.trim().split('.')).readInt32BE(0);\n    },\n        ipInt = ip2long(ip);\n\n    var offset = dataBuffer.readInt32BE(0);\n    var indexBuffer = dataBuffer.slice(4, offset - 4 + 4);\n    var tmp_offset = ipArray[0] * 4,\n        max_comp_len = offset - 1028,\n        index_offset = -1,\n        index_length = -1,\n        start = indexBuffer.slice(tmp_offset, tmp_offset + 4).readInt32LE(0);\n    for (start = start * 8 + 1024; start < max_comp_len; start += 8) {\n        if (indexBuffer.slice(start, start + 4).readInt32BE(0) >= ipInt) {\n            index_offset = (indexBuffer[start + 6] << 16) + (indexBuffer[start + 5] << 8) + indexBuffer[start + 4];\n            index_length = indexBuffer[start + 7];\n            break;\n        }\n    }\n    if (index_offset == -1 || index_length == -1) {\n        return [];\n    } else {\n        return dataBuffer.slice(offset + index_offset - 1024, offset + index_offset - 1024 + index_length).toString('utf-8').split(\"\\t\");\n    }\n};\n\nvar dataBuffer = null;\n\nexports.load = function (file) {\n    if (dataBuffer == null) {\n        dataBuffer = loadBinaryData(file);\n    }\n};\n\nexports.find = function (name, callback) {\n    dns.resolve4(name, function (err, addresses) {\n        if (err) {\n            callback(IpFind(name));\n        } else {\n            callback(IpFind(addresses.shift()));\n        }\n    });\n};\nexports.findSync = IpFind;",null]}