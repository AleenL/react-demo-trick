{"remainingRequest":"/Users/pro/new world/node_modules/babel-loader/lib/index.js!/Users/pro/new world/node_modules/eslint-loader/index.js??ref--3-0!/Users/pro/new world/app/public/js/xmlNative.js","dependencies":[{"path":"/Users/pro/new world/app/public/js/xmlNative.js","mtime":1521607953328},{"path":"/Users/pro/new world/.babelrc","mtime":1521535929596},{"path":"/Users/pro/new world/node_modules/cache-loader/dist/cjs.js","mtime":1521535871442},{"path":"/Users/pro/new world/node_modules/babel-loader/lib/index.js","mtime":1520329890000},{"path":"/Users/pro/new world/node_modules/eslint-loader/index.js","mtime":1499322156000}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nvar xmlNative = function xmlNative(opt, type) {\n    opt = opt || {};\n    opt.method = opt.method.toUpperCase() || 'POST';\n    opt.url = opt.url || '';\n    opt.async = opt.async || true;\n    opt.data = opt.data || null;\n    opt.success = opt.success || function () {};\n    var xmlHttp = new XMLHttpRequest();\n    if (opt.method.toUpperCase() === 'POST') {\n        xmlHttp.open(opt.method, opt.url, opt.async);\n        xmlHttp.setRequestHeader('Content-Type', 'application/json; charset=utf-8');\n        xmlHttp.send(JSON.stringify(opt.data));\n    } else if (opt.method.toUpperCase() === 'GET') {\n        var params = [];\n        for (var key in opt.data) {\n            params.push(key + '=' + opt.data[key]);\n        }\n        var postData = params.join('&');\n        xmlHttp.open(opt.method, opt.url + '?' + postData, opt.async);\n        xmlHttp.send(null);\n    }\n    if (type === 1) {\n        return new Promise(function (resolve, reject) {\n            xmlHttp.onreadystatechange = function () {\n                if (xmlHttp.readyState === 4) {\n                    if (xmlHttp.status === 200) {\n                        var responseText = JSON.parse(xmlHttp.responseText);\n                        if (responseText.code === 0) {\n                            resolve(responseText.data);\n                        } else {\n                            reject(responseText.message);\n                        }\n                    } else {\n                        reject(JSON.parse(xmlHttp.responseText), xmlHttp.status);\n                    }\n                }\n            };\n        });\n    } else {\n        xmlHttp.onreadystatechange = function () {\n            if (xmlHttp.readyState === 4) {\n                if (xmlHttp.status === 200) {\n                    opt.success(JSON.parse(xmlHttp.responseText), xmlHttp.status);\n                } else {\n                    opt.error(JSON.parse(xmlHttp.responseText), xmlHttp.status);\n                }\n            }\n        };\n    }\n};\nexports.default = xmlNative;",null]}